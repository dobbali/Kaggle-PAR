dt.train <- read.csv('train.csv', stringsAsFactors = FALSE)
dt.test <- read.csv('test.csv', stringsAsFactors = FALSE)
dim(dt.train)
str(dt.train)
numCols.tr <- NULL
charCols.tr <- NULL
misc.tr <- NULL
for (i in 1:ncol(dt.train)){
if(is.numeric(dt.train[,i])){
numCols.tr <- c(numCols.tr,names(dt.train)[i])
}
else if(is.character(dt.train[,i])){
charCols.tr <- c(charCols.tr,names(dt.train)[i])
}
else {
misc.tr <- c(misc.tr,names(dt.train)[i])
}
}
mis.vars <-data.frame(colSums(sapply(dt.train, is.na)))
mis.vars$num_yn <- "Z"
for(i in 1:nrow(mis.vars)){
if( rownames(mis.vars)[i] %in% numCols.tr){
mis.vars[i,2] <- "Y"
}else{
mis.vars[i,2] <- "N"
}
}
colnames(mis.vars) <- c('No_of_NAs', 'Numerical(y/n)')
kable(subset(mis.vars, No_of_NAs > 0 ))
numCols.te <- NULL
charCols.te <- NULL
misc.te <- NULL
for (i in 1:ncol(dt.test)){
if(is.numeric(dt.test[,i])){
numCols.te <- c(numCols.te,names(dt.test)[i])
}
else if(is.character(dt.test[,i])){
charCols.te <- c(charCols.te,names(dt.test)[i])
}
else {
misc.te <- c(misc.te,names(dt.test)[i])
}
}
mis.vars.te <-data.frame(colSums(sapply(dt.test, is.na)))
mis.vars.te$num_yn <- "Z"
for(i in 1:nrow(mis.vars.te)){
if( rownames(mis.vars.te)[i] %in% numCols.te){
mis.vars.te[i,2] <- "Y"
}else{
mis.vars.te[i,2] <- "N"
}
}
colnames(mis.vars.te) <- c('No_of_NAs', 'Numerical(y/n)')
kable(subset(mis.vars.te, No_of_NAs > 0 ))
bagImpute <- predict(preProcess(dt.train[,which(names(dt.train) %in% c('GarageYrBlt', 'MasVnrArea', 'LotFrontage'))], method = c("bagImpute")), dt.train[,which(names(dt.train) %in% c('GarageYrBlt', 'MasVnrArea', 'LotFrontage'))])
bagImpute
dt.train$GarageYrBlt <- round(bagImpute$GarageYrBlt)
dt.train$MasVnrArea <- bagImpute$MasVnrArea
dt.train$LotFrontage <- bagImpute$LotFrontage
bagImpute <- predict(preProcess(dt.test[,which(names(dt.test) %in% rownames(subset(mis.vars.te, (mis.vars.te$No_of_NAs>0 & mis.vars.te[,2] == "Y"))))], method = c("bagImpute")), dt.test[,which(names(dt.test) %in% rownames(subset(mis.vars.te, (mis.vars.te$No_of_NAs>0 & mis.vars.te[,2] == "Y"))))])
bagImpute
dt.test$GarageYrBlt <- round(bagImpute$GarageYrBlt)
dt.test$MasVnrArea <- bagImpute$MasVnrArea
dt.test$LotFrontage <- bagImpute$LotFrontage
dt.test$BsmtFinSF1 <- bagImpute$BsmtFinSF1
dt.test$BsmtFinSF2 <- bagImpute$BsmtFinSF2
dt.test$BsmtUnfSF <- bagImpute$BsmtUnfSF
dt.test$TotalBsmtSF <- bagImpute$TotalBsmtSF
dt.test$BsmtFullBath <- bagImpute$BsmtFullBath
dt.test$GarageCars <- round(bagImpute$GarageCars)
dt.test$GarageArea <- bagImpute$GarageArea
dt.train$Alley <- ifelse(is.na(dt.train$Alley),"No Alley", dt.train$Alley)
dt.train$MasVnrType <- ifelse(is.na(dt.train$MasVnrType),"None", dt.train$MasVnrType)
# some data has masvnrtype none and area <> 0
#subset(dt.train, dt.train$MasVnrType == "None")$MasVnrArea
dt.train$Electrical<- ifelse(is.na(dt.train$Electrical),"SBrKr",dt.train$Electrical)
dt.train$BsmtQual <- ifelse(is.na(dt.train$BsmtQual),"NoBsmt", dt.train$BsmtQual)
dt.train$BsmtCond <- ifelse(is.na(dt.train$BsmtCond),"NoBsmt", dt.train$BsmtCond)
dt.train$BsmtExposure <- ifelse(is.na(dt.train$BsmtExposure),"NoBsmt", dt.train$BsmtExposure)
dt.train$BsmtFinType1 <- ifelse(is.na(dt.train$BsmtFinType1),"NoBsmt", dt.train$BsmtFinType1)
dt.train$BsmtFinType2 <- ifelse(is.na(dt.train$BsmtFinType2),"NoBsmt", dt.train$BsmtFinType2)
dt.train$FireplaceQu <- ifelse(is.na(dt.train$FireplaceQu),"NoFireplace", dt.train$FireplaceQu)
dt.train$GarageType <- ifelse(is.na(dt.train$GarageType),"NoGarage", dt.train$GarageType)
dt.train$GarageFinish <- ifelse(is.na(dt.train$GarageFinish),"NoGarage", dt.train$GarageFinish)
dt.train$GarageQual <- ifelse(is.na(dt.train$GarageQual),"NoGarage", dt.train$GarageQual)
dt.train$GarageCond <- ifelse(is.na(dt.train$GarageCond),"NoGarage", dt.train$GarageCond)
dt.train$GarageCond <- ifelse(is.na(dt.train$GarageCond),"NoGarage", dt.train$GarageCond)
dt.train$PoolQC <- ifelse(is.na(dt.train$PoolQC),"NoPool", dt.train$PoolQC)
dt.train$Fence <- ifelse(is.na(dt.train$Fence),"NoFence", dt.train$Fence)
dt.train$MiscFeature <- ifelse(is.na(dt.train$MiscFeature),"NoFence", dt.train$MiscFeature)
dt.test$Alley <- ifelse(is.na(dt.test$Alley),"No Alley", dt.test$Alley)
dt.test$MasVnrType <- ifelse(is.na(dt.test$MasVnrType),"None", dt.test$MasVnrType)
# some data has masvnrtype none and area <> 0
#subset(dt.test, dt.test$MasVnrType == "None")$MasVnrArea
dt.test$BsmtQual <- ifelse(is.na(dt.test$BsmtQual),"NoBsmt", dt.test$BsmtQual)
dt.test$BsmtCond <- ifelse(is.na(dt.test$BsmtCond),"NoBsmt", dt.test$BsmtCond)
dt.test$BsmtExposure <- ifelse(is.na(dt.test$BsmtExposure),"NoBsmt", dt.test$BsmtExposure)
dt.test$BsmtFinType1 <- ifelse(is.na(dt.test$BsmtFinType1),"NoBsmt", dt.test$BsmtFinType1)
dt.test$BsmtFinType2 <- ifelse(is.na(dt.test$BsmtFinType2),"NoBsmt", dt.test$BsmtFinType2)
dt.test$FireplaceQu <- ifelse(is.na(dt.test$FireplaceQu),"NoFireplace", dt.test$FireplaceQu)
dt.test$GarageType <- ifelse(is.na(dt.test$GarageType),"NoGarage", dt.test$GarageType)
dt.test$GarageFinish <- ifelse(is.na(dt.test$GarageFinish),"NoGarage", dt.test$GarageFinish)
dt.test$GarageQual <- ifelse(is.na(dt.test$GarageQual),"NoGarage", dt.test$GarageQual)
dt.test$GarageCond <- ifelse(is.na(dt.test$GarageCond),"NoGarage", dt.test$GarageCond)
dt.test$GarageCond <- ifelse(is.na(dt.test$GarageCond),"NoGarage", dt.test$GarageCond)
dt.test$PoolQC <- ifelse(is.na(dt.test$PoolQC),"NoPool", dt.test$PoolQC)
dt.test$Fence <- ifelse(is.na(dt.test$Fence),"NoFence", dt.test$Fence)
dt.test$MiscFeature <- ifelse(is.na(dt.test$MiscFeature),"NoFence", dt.test$MiscFeature)
dt.test$MSZoning <- ifelse(is.na(dt.test$MSZoning),"RM",dt.test$MSZoning)
dt.test$Utilities <- ifelse(is.na(dt.test$Utilities),"AllPub",dt.test$Utilities)
dt.test$Exterior1st <- ifelse(is.na(dt.test$Exterior1st),"WdShing",dt.test$Exterior1st)
dt.test$Exterior2nd <- ifelse(is.na(dt.test$Exterior2nd),"Stone", dt.test$Exterior2nd)
dt.test$BsmtHalfBath <- ifelse(is.na(dt.test$BsmtHalfBath),0,dt.test$BsmtHalfBath)
dt.test$KitchenQual <- ifelse(is.na(dt.test$KitchenQual),"TA",dt.test$KitchenQual)
dt.test$Functional <- ifelse(is.na(dt.test$Functional),"Typ",dt.test$Functional)
dt.test$SaleType <- ifelse(is.na(dt.test$SaleType),"WD",dt.test$SaleType)
char_var <- names(dt.train)[which(sapply(dt.train, is.character))]
for(name in char_var){
#print(name)
dt.train[[name]] <- factor(dt.train[[name]])
}
char_var <- names(dt.test)[which(sapply(dt.test, is.character))]
for(name in char_var){
#print(name)
dt.test[[name]] <- factor(dt.test[[name]])
}
dt.train$bathrooms <- dt.train$BsmtFullBath+ (0.5  * dt.train$BsmtHalfBath) +dt.train$FullBath+ (0.5*dt.train$HalfBath)
dt.train$porch <- dt.train$WoodDeckSF + dt.train$OpenPorchSF + dt.train$EnclosedPorch + dt.train$X3SsnPorch + dt.train$ScreenPorch
dt.train$totalRoom <- dt.train$TotRmsAbvGrd + dt.train$KitchenAbvGr
dt.test$bathrooms <- dt.test$BsmtFullBath+ (0.5  * dt.test$BsmtHalfBath) +dt.test$FullBath+ (0.5*dt.test$HalfBath)
dt.test$porch <- dt.test$WoodDeckSF + dt.test$OpenPorchSF + dt.test$EnclosedPorch + dt.test$X3SsnPorch + dt.test$ScreenPorch
dt.test$totalRoom <- dt.test$TotRmsAbvGrd + dt.test$KitchenAbvGr
dt.train1 <- dt.train
dt.test1 <- dt.test
dt.train$SalePriceL <- log(dt.train$SalePrice+1)
hist(dt.train$SalePrice)
hist(dt.train$SalePriceL)
dt.train$SalePrice <- dt.train$SalePriceL
dt.train$SalePriceL <- NULL
index <- sample(1:(0.75*nrow(dt.train)), replace = FALSE)
t.train <- dt.train[index,]
nrow(t.train)
t.test <- dt.train[-index,]
nrow(t.test)
frmla = formula("SalePrice ~ GrLivArea + OverallQual + YearBuilt + LotArea+OverallCond+GarageCars+bathrooms+BsmtFinSF1+Neighborhood+Functional+ExterQual+HeatingQC+PoolQC+KitchenAbvGr+Condition2   ")
lm.standard <- train(SalePrice ~ GrLivArea + OverallQual+I(OverallQual^2) + YearBuilt + LotArea+OverallCond+GarageCars+bathrooms+BsmtFinSF1+Neighborhood+Functional+ExterQual+HeatingQC+PoolQC+KitchenAbvGr+Condition2 +Neighborhood:GrLivArea , data = t.train, method="lm")
rmse(exp(t.test$SalePrice)-1,exp(predict(lm.standard, newdata = t.test))-1)
rmse(exp(t.train$SalePrice)-1,exp(predict(lm.standard, newdata = t.train))-1)
model_list <- caretList(frmla,
data=dt.train,
trControl= trainControl(savePredictions = "final"),
preProcess=c("center","scale"),
methodList=c("rpart", "glmnet","gbm", "xgbTree", "ranger")
)
summary(resamples(model_list))
modelCor(resamples(model_list))
ce <- caretEnsemble(model_list)
summary(ce)
ce
summary(ce)
rmse(exp(t.test$SalePrice)-1,exp(predict(ce, newdata = t.test))-1)
rmse(exp(t.train$SalePrice)-1,exp(predict(ce, newdata = t.train))-1)
rmse(dt.train$SalePrice,predict(ce, newdata = dt.train))
result <- exp(predict(ce, newdata = dt.test))-1
dt.result <- NULL
dt.result$Id <- dt.test$Id
dt.result$SalePrice <- result
str(dt.test)
str(result)
dt.result <- as.data.frame(dt.result, row.names = NULL)
write.csv(dt.result, 'Result.csv')
imp_coef <- rbind(head(coef,15),
tail(coef,15))
imp_coef$coef.name
plot(dt.train$SalePrice, dt.train$OverallQual)
plot(dt.train$OverallQual, dt.train$SalePrice)
plot(dt.train$OverallQual + dt.train$OverallQual^2, dt.train$SalePrice)
plot(dt.train$OverallQual + dt.train$OverallQual^2, dt.train$SalePrice)
abline(SalePrice~OverallQual)
plot(dt.train$GrLivArea, dt.train$SalePrice)
plot(dt.train$bathrooms, dt.train$SalePrice)
lm.standard <- train(SalePrice ~ GrLivArea + OverallQual+ YearBuilt + LotArea+OverallCond+GarageCars+bathrooms+BsmtFinSF1+Neighborhood+Functional+ExterQual+HeatingQC+PoolQC+KitchenAbvGr+Condition2 +Neighborhood:GrLivArea , data = t.train, method="lm")
rmse(exp(t.test$SalePrice)-1,exp(predict(lm.standard, newdata = t.test))-1)
rmse(exp(t.train$SalePrice)-1,exp(predict(lm.standard, newdata = t.train))-1)
lm.standard <- train(SalePrice ~ GrLivArea + OverallQual+ YearBuilt + LotArea+OverallCond+GarageCars+bathrooms+BsmtFinSF1+Neighborhood+Functional+ExterQual+HeatingQC+PoolQC+KitchenAbvGr+Condition2  , data = t.train, method="lm")
rmse(exp(t.test$SalePrice)-1,exp(predict(lm.standard, newdata = t.test))-1)
rmse(exp(t.train$SalePrice)-1,exp(predict(lm.standard, newdata = t.train))-1)
rmse(exp(t.test$SalePrice)-1,exp(predict(lm.standard, newdata = t.test))-1)
rmse(exp(t.train$SalePrice)-1,exp(predict(lm.standard, newdata = t.train))-1)
index <- sample(1:(0.75*nrow(dt.train)), replace = FALSE)
t.train <- dt.train[index,]
nrow(t.train)
t.test <- dt.train[-index,]
nrow(t.test)
lm.standard <- train(SalePrice ~ GrLivArea + OverallQual+ YearBuilt + LotArea+OverallCond+GarageCars+bathrooms+BsmtFinSF1+Neighborhood+Functional+ExterQual+HeatingQC+PoolQC+KitchenAbvGr+Condition2  , data = t.train, method="lm")
rmse(exp(t.test$SalePrice)-1,exp(predict(lm.standard, newdata = t.test))-1)
rmse(exp(t.train$SalePrice)-1,exp(predict(lm.standard, newdata = t.train))-1)
summary(lm.standard)
coefplot(coef(lm.standard))
coefplot((lm.standard))
coefplot(lm.standard$finalModel)
lm.standard <- train(SalePrice ~ GrLivArea + OverallQual+ YearBuilt + LotArea+OverallCond+GarageCars+bathrooms+BsmtFinSF1+Neighborhood+Functional+ExterQual+HeatingQC+PoolQC+KitchenAbvGr+Condition2  , preProcess=c("center","scale"), data = t.train, method="lm")
coefplot(lm.standard$finalModel)
lm.standard <- train(SalePrice ~ GrLivArea + OverallQual+ YearBuilt + LotArea+OverallCond+GarageCars+bathrooms+BsmtFinSF1+BsmtFinSF2+Neighborhood+Functional+HeatingQC+PoolQC+KitchenAbvGr+Condition2  , preProcess=c("center","scale"), data = t.train, method="lm")
lm.standard <- train(SalePrice ~ GrLivArea + OverallQual+ YearBuilt + LotArea+OverallCond+GarageCars+bathrooms+BsmtFinSF1+BsmtFinSF2+Neighborhood+Functional+HeatingQC+PoolQC+KitchenAbvGr  , preProcess=c("center","scale"), data = t.train, method="lm")
rmse(exp(t.test$SalePrice)-1,exp(predict(lm.standard, newdata = t.test))-1)
rmse(exp(t.train$SalePrice)-1,exp(predict(lm.standard, newdata = t.train))-1)
model_list <- caretList(frmla,
data=dt.train,
trControl= trainControl(savePredictions = "final"),
preProcess=c("center","scale"),
@
lm.standard <- train(frmla, preProcess=c("center","scale"), data = t.train, method="lm")
lm.standard <- train(frmla, preProcess=c("center","scale"), data = t.train, method="lm")
rmse(exp(t.test$SalePrice)-1,exp(predict(lm.standard, newdata = t.test))-1)
rmse(exp(t.train$SalePrice)-1,exp(predict(lm.standard, newdata = t.train))-1)
frmla = formula("SalePrice ~ GrLivArea + OverallQual + YearBuilt + LotArea+OverallCond+GarageCars+bathrooms+Neighborhood   ")
lm.standard <- train(frmla, preProcess=c("center","scale"), data = t.train, method="lm")
rmse(exp(t.test$SalePrice)-1,exp(predict(lm.standard, newdata = t.test))-1)
rmse(exp(t.train$SalePrice)-1,exp(predict(lm.standard, newdata = t.train))-1)
model_list <- caretList(frmla,
data=dt.train,
trControl= trainControl(savePredictions = "final"),
preProcess=c("center","scale"),
methodList=c("rpart", "glmnet","gbm", "xgbTree", "ranger")
)
summary(resamples(model_list))
modelCor(resamples(model_list))
ce <- caretEnsemble(model_list)
summary(ce)
rmse(exp(t.test$SalePrice)-1,exp(predict(ce, newdata = t.test))-1)
rmse(exp(t.train$SalePrice)-1,exp(predict(ce, newdata = t.train))-1)
rmse(dt.train$SalePrice,predict(ce, newdata = dt.train))
result <- exp(predict(ce, newdata = dt.test))-1
dt.result <- NULL
rmse(exp(t.test$SalePrice)-1,exp(predict(ce, newdata = t.test))-1)
rmse(exp(t.train$SalePrice)-1,exp(predict(ce, newdata = t.train))-1)
dt.result <- NULL
dt.result$Id <- dt.test$Id
dt.result$SalePrice <- result
str(dt.test)
str(result)
dt.result <- as.data.frame(dt.result, row.names = NULL)
write.csv(dt.result, 'Result.csv')
write.csv(dt.result, 'Result.csv')
model_list
ce
summary(ce)
model_list <- caretList(frmla,
data=dt.train,
trControl= trainControl(savePredictions = "final"),
preProcess=c("center","scale"),
methodList=c("glmnet","gbm", "xgbTree", "ranger")
)
summary(resamples(model_list))
modelCor(resamples(model_list))
frmla = formula("SalePrice ~ GrLivArea + OverallQual + YearBuilt + LotArea+GarageCars+bathrooms+Neighborhood + TotalBsmtSF")
lm.standard <- train(frmla, preProcess=c("center","scale"), data = t.train, method="lm")
coefplot(lm.standard$finalModel)
rmse(exp(t.test$SalePrice)-1,exp(predict(lm.standard, newdata = t.test))-1)
rmse(exp(t.train$SalePrice)-1,exp(predict(lm.standard, newdata = t.train))-1)
lm.standard <- train(frmla, preProcess=c("center","scale"), data = t.train, method="xgbTree")
rmse(exp(t.test$SalePrice)-1,exp(predict(lm.standard, newdata = t.test))-1)
rmse(exp(t.train$SalePrice)-1,exp(predict(lm.standard, newdata = t.train))-1)
coefplot(lm.standard$finalModel)
lm.standard
lm.standard$finalModel
summary(lm.standard$finalModel)
nnModel <- train(frmla, preProcess=c("center","scale"), data = t.train, method="nn")
nnModel <- train(frmla, preProcess=c("center","scale"), data = t.train, method="nnet")
rmse(exp(t.test$SalePrice)-1,exp(predict(nnModel, newdata = t.test))-1)
rmse(exp(t.train$SalePrice)-1,exp(predict(nnModel, newdata = t.train))-1)
nnModel <- train(frmla, preProcess=c("center","scale"), data = t.train, method="nnet", metric="RMSE")
nnModel
rmse(exp(t.test$SalePrice)-1,exp(predict(nnModel, newdata = t.test))-1)
rmse(exp(t.train$SalePrice)-1,exp(predict(nnModel, newdata = t.train))-1)
xfgTree_mod <- train(frmla, preProcess=c("center","scale"), data = t.train, method="xfgTree", metric="RMSE")
xfgTree_mod <- train(frmla, preProcess=c("center","scale"), data = t.train, method="adaboost", metric="RMSE")
xfgTree_mod <- train(frmla, preProcess=c("center","scale"), data = t.train, method="gbm", metric="RMSE")
rmse(exp(t.test$SalePrice)-1,exp(predict(nnModel, newdata = t.test))-1)
rmse(exp(t.train$SalePrice)-1,exp(predict(nnModel, newdata = t.train))-1)
mod, newdata = t.test))-1)
rmse(exp(t.train$SalePrice)-1,exp(predict(xfgTree
rmse(exp(t.test$SalePrice)-1,exp(predict(xfgTree_mod, newdata = t.test))-1)
rmse(exp(t.train$SalePrice)-1,exp(predict(xfgTree_mod, newdata = t.train))-1)
model_list <- caretList(frmla,
rmse(exp(t.train$SalePrice)-1,exp(predict(xfgTree_mod, newdata = t.train))-1)
@
@
xfgTree_mod <- train(frmla, preProcess=c("center","scale"), data = t.train, method="gbm", metric="RMSE")
lm.standard
importance <- xgb.importance(feature_names = sparse_matrix@Dimnames[[2]], model = lm.standard$finalModel)
importance <- xgb.importance(feature_names = t.train@Dimnames[[2]], model = lm.standard$finalModel)
names(t.train)
importance <- xgb.importance(feature_names = names(t.train), model = lm.standard$finalModel)
head(importance)
importance
importance <- xgb.importance(feature_names = c('GrLivArea' , 'OverallQual' , 'YearBuilt' , 'LotArea' , 'GarageCars' , 'bathrooms' , 'Neighborhood' , 'TotalBsmtSF'), model = lm.standard$finalModel)
head(importance)
importance
importance
setwd("E:/MS/PAR/GroupProject/PAR-GP")
dt.train <- read.csv('train.csv', stringsAsFactors = FALSE)
dt.test <- read.csv('test.csv', stringsAsFactors = FALSE)
dim(dt.train)
str(dt.train)
numCols.tr <- NULL
charCols.tr <- NULL
misc.tr <- NULL
for (i in 1:ncol(dt.train)){
if(is.numeric(dt.train[,i])){
numCols.tr <- c(numCols.tr,names(dt.train)[i])
}
charCols.tr <- c(charCols.tr,names(dt.train)[i])
else if(is.character(dt.train[,i])){
}
else {
misc.tr <- c(misc.tr,names(dt.train)[i])
}
}
numCols.tr <- NULL
charCols.tr <- NULL
misc.tr <- NULL
for (i in 1:ncol(dt.train)){
if(is.numeric(dt.train[,i])){
numCols.tr <- c(numCols.tr,names(dt.train)[i])
}
else if(is.character(dt.train[,i])){
charCols.tr <- c(charCols.tr,names(dt.train)[i])
}
else {
misc.tr <- c(misc.tr,names(dt.train)[i])
}
}
mis.vars <-data.frame(colSums(sapply(dt.train, is.na)))
mis.vars$Fract <- mis.vars[,1]/nrow(dt.train)
mis.vars$num_yn <- "Z"
for(i in 1:nrow(mis.vars)){
if( rownames(mis.vars)[i] %in% numCols.tr){
mis.vars[i,2] <- "Y"
}else{
mis.vars[i,2] <- "N"
}
}
colnames(mis.vars) <- c('No_of_NAs','Fraction of Missing', 'Numerical(y/n)')
kable(subset(mis.vars, No_of_NAs > 0 ))
mis.vars <-data.frame(colSums(sapply(dt.train, is.na)))
mis.vars$Fract <- mis.vars[,1]/nrow(dt.train)
mis.vars$num_yn <- "Z"
for(i in 1:nrow(mis.vars)){
if( rownames(mis.vars)[i] %in% numCols.tr){
mis.vars[i,3] <- "Y"
}else{
mis.vars[i,3] <- "N"
}
}
mis.vars <-data.frame(colSums(sapply(dt.train, is.na)))
mis.vars$Fract <- round(mis.vars[,1]/nrow(dt.train) * 100 ,2)
mis.vars$num_yn <- "Z"
for(i in 1:nrow(mis.vars)){
if( rownames(mis.vars)[i] %in% numCols.tr){
mis.vars[i,3] <- "Y"
}else{
mis.vars[i,3] <- "N"
}
}
colnames(mis.vars) <- c('No_of_NAs','% of Missing variables', 'Numerical(y/n)')
kable(subset(mis.vars, No_of_NAs > 0 ))
numCols.te <- NULL
charCols.te <- NULL
misc.te <- NULL
for (i in 1:ncol(dt.test)){
if(is.numeric(dt.test[,i])){
numCols.te <- c(numCols.te,names(dt.test)[i])
}
else if(is.character(dt.test[,i])){
charCols.te <- c(charCols.te,names(dt.test)[i])
}
else {
misc.te <- c(misc.te,names(dt.test)[i])
}
}
numCols.te <- NULL
charCols.te <- NULL
misc.te <- NULL
for (i in 1:ncol(dt.test)){
if(is.numeric(dt.test[,i])){
numCols.te <- c(numCols.te,names(dt.test)[i])
}
else if(is.character(dt.test[,i])){
charCols.te <- c(charCols.te,names(dt.test)[i])
}
else {
misc.te <- c(misc.te,names(dt.test)[i])
}
}
mis.vars.te <-data.frame(colSums(sapply(dt.test, is.na)))
mis.vars.te$Fract <- round(mis.vars.te[,1]/nrow(dt.train) * 100 ,2)
mis.vars.te$num_yn <- "Z"
for(i in 1:nrow(mis.vars.te)){
if( rownames(mis.vars.te)[i] %in% numCols.te){
mis.vars.te[i,2] <- "Y"
}else{
mis.vars.te[i,2] <- "N"
}
}
colnames(mis.vars.te) <- c('No_of_NAs','% of Missing variables', 'Numerical(y/n)')
kable(subset(mis.vars.te, No_of_NAs > 0 ))
for(i in 1:nrow(mis.vars.te)){
if( rownames(mis.vars.te)[i] %in% numCols.te){
mis.vars.te$Fract <- round(mis.vars.te[,1]/nrow(dt.train) * 100 ,2)
mis.vars.te$num_yn <- "Z"
for(i in 1:nrow(mis.vars.te)){
if( rownames(mis.vars.te)[i] %in% numCols.te){
mis.vars.te[i,3] <- "Y"
}else{
mis.vars.te[i,3] <- "N"
}
}
colnames(mis.vars.te) <- c('No_of_NAs','% of Missing variables', 'Numerical(y/n)')
kable(subset(mis.vars.te, No_of_NAs > 0 ))
```
mis.vars.te <-data.frame(colSums(sapply(dt.test, is.na)))
mis.vars.te$Fract <- round(mis.vars.te[,1]/nrow(dt.train) * 100 ,2)
mis.vars.te$num_yn <- "Z"
for(i in 1:nrow(mis.vars.te)){
if( rownames(mis.vars.te)[i] %in% numCols.te){
mis.vars.te[i,3] <- "Y"
}else{
mis.vars.te[i,3] <- "N"
}
}
colnames(mis.vars.te) <- c('No_of_NAs','% of Missing variables', 'Numerical(y/n)')
kable(subset(mis.vars.te, No_of_NAs > 0 ))
rownames(subset(mis.vars.te, (mis.vars.te$No_of_NAs>0 & mis.vars.te[,2] == "Y")))
rownames(subset(mis.vars.te, (mis.vars.te$No_of_NAs>0 & mis.vars.te[,3] == "Y")))
hist(log(sale_price$dt.train.SalePrice+1),main = "Log of Sale Price Distribution",xlab = 'Sale Price',freq = FALSE,col=brewer.pal(8,"Set3"),las = 3,breaks = 190)
hist(log(sale_price$dt.train.SalePrice)+1,main = "Log of Sale Price Distribution",xlab = 'Sale Price',freq = FALSE,col=brewer.pal(8,"Set3"),las = 3,breaks = 190)
sale_price <- data.frame(dt.train$SalePrice)
hist(log(sale_price$dt.train.SalePrice)+1,main = "Log of Sale Price Distribution",xlab = 'Sale Price',freq = FALSE,col=brewer.pal(8,"Set3"),las = 3,breaks = 190)
lines(density(log(sale_price$dt.train.SalePrice)+1))
colnames(top5Corr)<- c("Cors","Features")
row.names(top5Corr) <- NULL
kable(top5Corr[,c(2,1)])
p <- ggplot(dt.train, aes(factor(OverallQual), SalePrice)) + geom_violin(scale = "width")
p
p <- ggplot(dt.train, aes((OverallQual), SalePrice)) + geom_violin(scale = "width")
p
p <- ggplot(dt.train, aes(factor(OverallQual), SalePrice)) + geom_violin(scale = "width")
p
boxplot(dt.train$SalePrice~dt.train$OverallCond, data=dt.train, notch=FALSE,
col=(c("gold","darkgreen")),
main="Overall House Condition and Price", xlab="Overal Condition")
main="Sale Price Distribution with Overall House Condition", xlab="Overal Condition")
boxplot(dt.train$SalePrice~dt.train$OverallCond, data=dt.train, notch=FALSE,
col=(c("gold","darkgreen")),
main="Sale Price Distribution with Overall House Condition", xlab="Overal Condition")
boxplot(dt.train$SalePrice~dt.train$GarageCars, data=dt.train, notch=FALSE,
col=(c("gold","red")),
main="Garage Cars and Price", xlab="Garage Cars")
dt.train$bathrooms <- dt.train$FullBath + 0.5*dt.train$HalfBath
boxplot(dt.train$SalePrice~dt.train$bathrooms, data =dt.train, notch = FALSE,col=(c("gold","red")),
main="Bathrooms and Sales price", xlab="Total Bathrooms")
boxplot(dt.train$SalePrice~dt.train$Neighborhood, data =dt.train, notch = FALSE,col=(c("gold","red")),
main="Neighborhood and Sales price", xlab="", las=2)
correlations <- cor(dt.train[, numeric_var], use = "everything")
corrplot(correlations, method = "circle", type="lower",  sig.level = 0.01, insig = "blank", tl.col = "grey",tl.cex = 0.6)
correlations <- cor(dt.train[, numeric_var], use = "everything")
corrplot(correlations, method = "circle", type="lower",  sig.level = 0.01, insig = "blank", tl.col = "grey",tl.cex = 0.6)
numeric_var <- names(dt.train)[which(sapply(dt.train, is.numeric))]
numeric_var
correlations <- cor(dt.train[, numeric_var], use = "everything")
corrplot(correlations, method = "circle", type="lower",  sig.level = 0.01, insig = "blank", tl.col = "grey",tl.cex = 0.6)
df.corr <- data.frame(cor(dt.train[,(numeric_var)], method="pearson"))
df.mul.cor <- NULL
for(i in 1:nrow(df.corr)){
df.temp <- NULL
for(j in 1:i){
if(!is.na(df.corr[i,j])){
if(df.corr[i,j] >= 0.6 && df.corr[i,j] != 1){
df.temp$name1 <- names(df.corr)[i]
df.temp$name2 <- names(df.corr)[j]
df.mul.cor <- rbind(df.mul.cor,df.temp)
df.temp$cor <- df.corr[i,j]
}
}
}
}
df.mul.cor <- as.data.frame(df.mul.cor)
```
Following table contains the combinations of variables with highest correlation which has a minimum of 0.6 as corelation value. This will identify redundant predictors
df.mul.cor <- as.data.frame(df.mul.cor)
df.mul.cor <- subset(df.mul.cor, name1 != "SalePrice")
kable(df.mul.cor, row.names=FALSE)
dt.train$bathrooms <- dt.train$BsmtFullBath+ (0.5  * dt.train$BsmtHalfBath) +dt.train$FullBath+ (0.5*dt.train$HalfBath)
dt.train$porch <- dt.train$WoodDeckSF + dt.train$OpenPorchSF + dt.train$EnclosedPorch + dt.train$X3SsnPorch + dt.train$ScreenPorch
dt.train$totalRoom <- dt.train$TotRmsAbvGrd + dt.train$KitchenAbvGr
dt.test$bathrooms <- dt.test$BsmtFullBath+ (0.5  * dt.test$BsmtHalfBath) +dt.test$FullBath+ (0.5*dt.test$HalfBath)
dt.test$porch <- dt.test$WoodDeckSF + dt.test$OpenPorchSF + dt.test$EnclosedPorch + dt.test$X3SsnPorch + dt.test$ScreenPorch
dt.train$TotRmsAbvGrd + dt.train$KitchenAbvGr
KitchenAbvGr
dt.train$KitchenAbvGr
kable(df.mul.cor, row.names=FALSE)
dt.train1 <- dt.train
dt.test1 <- dt.test
skewed_feats <- sapply(numCols.tr,function(x){skewness(dt.train[[x]],na.rm=TRUE)})
skewed_feats <- skewed_feats[skewed_feats > 0.75]
skewed_feats
skewed_feats.df <- as.data.frame(skewed_feats)
skewed_feats.df
names(skewed_feats.df)
@
